/**Given a 32-bit signed integer, reverse digits of an integer.
*Example 1:Input: 123 Output: 321
*Example 2:Input: -123 Output: -321
*Example 3:Input: 120 Output: 21
*Note:
*Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. 
*For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/


class Solution {
    public int reverse(int x) {
        int a ;
        
        if(x== 0||x == Integer.MIN_VALUE||x == Integer.MAX_VALUE){
            return 0;
        }
       else if(x<0){  //判断x是否为负数，如果为负数，变为正数；
            a = -x;
       }
        else{
            a = x; 
        }
       String renum = Integer.toString(a);
       int num[] = new int[renum.length()];
       int numLength = renum.length();
       
       
       for (int i = 0; i< numLength;i++){
           Character ch = renum.charAt(i);
           num[numLength-i-1] = Integer.parseInt(ch.toString());
       }
       

       String result = "";
       for(int j = 0; j<renum.length();j++){
           String s = new String();
           int k = num[j];
           s = Integer.toString(k);
          result = result.concat(s);        
       }
        long resultNum = Long.parseLong(result,10);
        if (resultNum >= Integer.MAX_VALUE) {
            return 0;
        }
        else 
       if(x<0){
            return -Integer.parseInt(result);
        }
        else{
            return Integer.parseInt(result);
        } 
        
    }
       
}


